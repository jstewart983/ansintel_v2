var _regeneratorRuntime = require('babel-runtime/regenerator').default;

// Generated by CoffeeScript 1.9.3
var parseChallenge;

parseChallenge = _regeneratorRuntime.mark(function callee$0$0(parser) {
  var challenge;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        challenge = {};
        context$1$0.next = 3;
        return parser.readBuffer(3);

      case 3:
        context$1$0.next = 5;
        return parser.readString(8);

      case 5:
        challenge.magic = context$1$0.sent;
        context$1$0.next = 8;
        return parser.readInt32LE();

      case 8:
        challenge.type = context$1$0.sent;
        context$1$0.next = 11;
        return parser.readInt16LE();

      case 11:
        challenge.domainLen = context$1$0.sent;
        context$1$0.next = 14;
        return parser.readInt16LE();

      case 14:
        challenge.domainMax = context$1$0.sent;
        context$1$0.next = 17;
        return parser.readInt32LE();

      case 17:
        challenge.domainOffset = context$1$0.sent;
        context$1$0.next = 20;
        return parser.readInt32LE();

      case 20:
        challenge.flags = context$1$0.sent;
        context$1$0.next = 23;
        return parser.readBuffer(8);

      case 23:
        challenge.nonce = context$1$0.sent;
        context$1$0.next = 26;
        return parser.readBuffer(8);

      case 26:
        challenge.zeroes = context$1$0.sent;
        context$1$0.next = 29;
        return parser.readInt16LE();

      case 29:
        challenge.targetLen = context$1$0.sent;
        context$1$0.next = 32;
        return parser.readInt16LE();

      case 32:
        challenge.targetMax = context$1$0.sent;
        context$1$0.next = 35;
        return parser.readInt32LE();

      case 35:
        challenge.targetOffset = context$1$0.sent;
        context$1$0.next = 38;
        return parser.readBuffer(8);

      case 38:
        challenge.oddData = context$1$0.sent;
        context$1$0.next = 41;
        return parser.readBuffer(challenge.domainLen);

      case 41:
        challenge.domain = context$1$0.sent.toString('ucs2');
        context$1$0.next = 44;
        return parser.readBuffer(challenge.targetLen);

      case 44:
        challenge.target = context$1$0.sent;
        return context$1$0.abrupt('return', challenge);

      case 46:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

module.exports = _regeneratorRuntime.mark(function callee$0$0(parser) {
  var challenge;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(parseChallenge(parser), 't0', 1);

      case 1:
        challenge = context$1$0.t0;
        return context$1$0.abrupt('return', {
          name: 'SSPICHALLENGE',
          event: 'sspichallenge',
          ntlmpacket: challenge
        });

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});